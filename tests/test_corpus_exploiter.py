from unittest import TestCase
import os
from autocat.detector import read_corpus, dispatch, Dispatched
import json

file = os.path.join(
    os.path.dirname(os.path.abspath(__file__)),
    "example.tsv"
)


class TestExploiter(TestCase):
    def test_read(self):
        stats = read_corpus([file], category_key="cat1", disambiguation_key="disambiguation")
        self.assertEqual(
            stats["lemma1"]["TWO_CAT_1"]["pos1"], 9,
            "Data is correctly counted"
        )
        self.assertEqual(
            stats["lemma1"]["TWO_CAT_2"]["pos2"], 9,
            "Data is correctly counted"
        )

    def test_dispatch(self):
        stats = read_corpus([file], category_key="cat1", disambiguation_key="disambiguation")
        disp = json.loads(json.dumps(dispatch(stats)._asdict()))

        self.assertEqual(
            dict(
                stats_per_dis_nb={
                    '2': {
                        'total': 3,
                        'auto': 2,
                        'lemma': ['lemma1', 'lemma4', "impossible"]
                    },
                    '1': {
                        'total': 2,
                        'auto': 0,
                        'lemma': ['lemma2', 'lemma3']
                    }
                },
                partially_categorizable=[],
                uncategorizable=["impossible"],
                one_disambiguation_only={
                    'lemma2': 'STRAIGHT',
                    'lemma3': 'ONLY_ONE_IN_EACH'
                },
                autodisambiguation={
                    'lemma1': {
                        'pos1': 'TWO_CAT_1',
                        'pos2': 'TWO_CAT_2'
                    },
                    'lemma4': {
                        'pos1': 'IGNORE_RESIDUAL_ERROR_1',
                        'pos2': 'IGNORE_RESIDUAL_ERROR_2'
                    }
                }
            ),
            disp,
            "Dispatch should be equal"
        )